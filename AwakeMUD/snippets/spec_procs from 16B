/********************************************************************************
* All subsequent code was pulled from AwakeMUD 0.8.16B and is not guaranteed    *
* to be compatible with 0.8.20B or AwakeMUD Community Edition.                  *
********************************************************************************/

/* ********************************************************************
 *  Special procedures for mobiles                                      *
 ******************************************************************** */

SPECIAL(puff)
{
  if (cmd || FIGHTING(ch) || !AWAKE(ch))
    return 0;
  
  switch (number(0, 150)) {
    case 0:
      do_say(ch, "My god!  It's full of stars!", 0, 0);
      return FALSE;
    case 1:
      do_say(ch, "How'd all those fish get up here?", 0, 0);
      return FALSE;
    case 2:
      do_say(ch, "I'm a very female dragon.", 0, 0);
      return FALSE;
    case 3:
      do_say(ch, "I've got a peaceful, easy feeling.", 0, 0);
      return FALSE;
  }
  return FALSE;
}

SPECIAL(wendigo)
{
  struct char_data *wendigo = (char_data *) me;
  struct obj_data *obj;
  bool found = FALSE;
  
  if (!AWAKE(ch) || (GET_POS(ch) == POS_FIGHTING))
    return(FALSE);
  
  if (!cmd)
    switch(number(1,160)) {
      case 12:
        do_say(ch, "Look, no invitation, no entry. It's that simple.", 0, 0);
        return TRUE;
      case 92:
        do_say(ch, "You're a friend of who? Nice try chummer.", 0, 0);
        return TRUE;
      case 147:
        act("As someone tries to sneak in, $n grabs them by the collar and "
            "chucks them down the alley.", FALSE, ch, 0, 0, TO_ROOM);
        return TRUE;
      default:
        return FALSE;
    }
  
  if ((CMD_IS("north") || CMD_IS("enter")) && CAN_SEE(wendigo, ch) && world[wendigo->in_room].number == 4503) {
    for (obj = ch->carrying; obj; obj = obj->next_content)
      if (GET_OBJ_VNUM(obj) == 4517)
        found = TRUE;
    
    if (found)
      perform_move(ch, NORTH, LEADER, NULL);
    else
      do_say(wendigo, "Hey chummer, invitation needed.", 0, 0);
    return(TRUE);
  }
  
  return(FALSE);
}

SPECIAL(pimp)
{
  if (cmd || FIGHTING(ch) || !AWAKE(ch))
    return 0;
  
  switch(number(1,160)) {
    case 12:
      do_say(ch, "Hey chummer, you want some girls? I got girls.", 0, 0);
      return TRUE;
    case 92:
      do_say(ch, "All my girls are clean, no BTL or any shit like that.", 0, 0);
      return TRUE;
    case 147:
      act("Sweating under the heat of the room, $n grabs his handkerchief "
          "and pats his forehead.", FALSE, ch, 0, 0, TO_ROOM);
      return TRUE;
  }
  return FALSE;
}

SPECIAL(prostitute)
{
  if (cmd || FIGHTING(ch) || !AWAKE(ch))
    return 0;
  
  switch(number(1,160)) {
    case 12:
      do_say(ch, "Hey baby, you looking for a good time?", 0, 0);
      return TRUE;
    case 92:
      do_say(ch, "2000 nuyen for a good time!", 0, 0);
      return TRUE;
    case 147:
      act("$n entices you, revealing more than enough cleavage.",
          FALSE, ch, 0, 0, TO_ROOM);
      return TRUE;
  }
  return(FALSE);
}

SPECIAL(heinrich)
{
  if (cmd || FIGHTING(ch) || !AWAKE(ch))
    return 0;
  
  switch(number(1,160)) {
    case 12:
      do_say(ch, "What'll it be today then?", 0, 0);
      return TRUE;
    case 92:
      do_say(ch, "There was some suits in here asking for you. I told em you "
             "ain't been around.", 0, 0);
      return TRUE;
    case 147:
      act("$n grabs a pint glass from under the counter and serves a punter "
          "the local brew.", FALSE, ch, 0, 0, TO_ROOM);
      return TRUE;
  }
  return FALSE;
}

SPECIAL(ignaz)
{
  if (cmd || FIGHTING(ch) || !AWAKE(ch))
    return 0;
  
  switch(number(1,160)) {
    case 12:
      do_say(ch, "Hey you! Let's have a fight. I'm serious.", 0, 0);
      return TRUE;
    case 92:
      do_say(ch, "What a show! You see that cute one over there?", 0, 0);
      return TRUE;
    case 147:
      act("$n rocks back and forth in his chair, throwing random beer "
          "bottles at unlucky punters.", FALSE, ch, 0, 0, TO_ROOM);
      return TRUE;
  }
  return FALSE;
}

SPECIAL(waitress)
{
  if (cmd || FIGHTING(ch) || !AWAKE(ch))
    return 0;
  
  switch(number(1,160)) {
    case 12:
      do_say(ch, "So what you want to eat eh?", 0, 0);
      return TRUE;
    case 92:
      do_say(ch, "That's three kegs of beer, five chickens, and a garlic "
             "bread.", 0, 0);
      return TRUE;
    case 147:
      act("$n listens carefully to a clearly drunken madman, scribbling down "
          "random orders.", FALSE, ch, 0, 0, TO_ROOM);
      return TRUE;
  }
  return FALSE;
}

SPECIAL(tunnel_rat)
{
  if (cmd || FIGHTING(ch) || !AWAKE(ch))
    return 0;
  
  switch(number(1,160)) {
    case 12:
      act("$n nibbles on a small child sized bone.", FALSE, ch, 0, 0, TO_ROOM);
      return TRUE;
    case 92:
      act("$n squeaks quietly in the darkness.", FALSE, ch, 0, 0, TO_ROOM);
      return TRUE;
    case 147:
      
      
      act("$n runs between your legs and on into the blackness.",
          FALSE, ch, 0, 0, TO_ROOM);
      return TRUE;
  }
  return FALSE;
}

SPECIAL(dracula)
{
  struct char_data *vict;
  
  if (cmd || GET_POS(ch) != POS_FIGHTING)
    return FALSE;
  
  for (vict = world[ch->in_room].people; vict; vict = vict->next_in_room)
    if (FIGHTING(vict) == ch && !number(0, 4))
      break;
  
  if (vict == NULL)
    vict = FIGHTING(ch);
  /*
   if ((GET_TKE(ch) > 22) && !number(0, 10))
   mob_cast(ch, vict, NULL, SPELL_POWERBLAST, 0);
   
   if ((GET_TKE(ch) > 10) && !number(0, 8))
   mob_cast(ch, vict, NULL, SPELL_ELEMENTBALL, SPELL_ELEMENT_FIRE);
   
   if ((GET_TKE(ch) > 20) && !number(0, 12))
   mob_cast(ch, vict, NULL, SPELL_HELLBLAST, 0);
   
   if (number(0, 4))
   return TRUE;
   
   mob_cast(ch, vict, NULL, SPELL_HELLBLAST, 0);
   */
  return TRUE;
}

SPECIAL(atomix)
{
  struct char_data *atomix = (struct char_data *) me;
  
  if (CMD_IS("buy")) {
    skip_spaces(&argument);
    if (!*argument || !CAN_SEE(atomix, ch) || number(0, 3) || str_cmp(argument, "guns") != 0)
      return(FALSE);
    
    act("$n says, \"Oh, so you int'rested in da biz?\"",
        FALSE, atomix, 0, ch, TO_VICT);
    act("$n unlocks and opens the door, and shoves you through.",
        FALSE, atomix, 0, ch, TO_VICT);
    act("$n opens the door and casually shoves $M through it.",
        TRUE, atomix, 0, ch, TO_NOTVICT);
    act("You say, \"Oh, so you int'rested in da biz?\"",
        FALSE, atomix, 0, 0, TO_CHAR);
    act("You open the door and grab $N, ruthlessly tossing $M through it.",
        FALSE, atomix, 0, ch, TO_CHAR);
    char_from_room(ch);
    char_to_room(ch, real_room(4598));
    look_at_room(ch, 0);
    act("The door closes behind you.", FALSE, atomix, 0, ch, TO_VICT);
    return (TRUE);
  }
  return(FALSE);
}

/* ********************************************************************
 *  Special procedures for objects                                     *
 ******************************************************************** */


SPECIAL(rng)
{
  ACMD(do_echo);
  struct char_data *tch;
  struct obj_data *obj, *rng = (struct obj_data *) me;
  struct follow_type *f;
  int result;
  
  if (CMD_IS("use")) {
    two_arguments(argument, arg, buf1);
    
    generic_find(arg, FIND_OBJ_INV | FIND_OBJ_ROOM, ch, &tch, &obj);
    
    if (!obj || obj != rng)
      return FALSE;
    
    if (!str_cmp(buf1, "group")) {
      if (ch->master || !AFF_FLAGGED(ch, AFF_GROUP)) {
        send_to_char("You have to be the leader of a group to do that!\r\n", ch);
        return TRUE;
      }
      act("$n activates $p and the display lights up.",
          FALSE, ch, rng, 0, TO_ROOM);
      act("You activate $p and the display lights up.",
          FALSE, ch, rng, 0, TO_CHAR);
      result = number(1, 1000);
      sprintf(buf, "%40s: %d.\r\n", GET_NAME(ch), result);
      for (f = ch->followers; f; f = f->next)
        if (AFF_FLAGGED(f->follower, AFF_GROUP)) {
          result = number(1, 1000);
          sprintf(buf + strlen(buf), "%40s: %d.",
                  GET_NAME(f->follower), result);
          if (f->next && AFF_FLAGGED(f->next->follower, AFF_GROUP))
            strcat(buf, "\r\n");
        }
      act(buf, FALSE, ch, 0, 0, TO_CHAR);
      act(buf, FALSE, ch, 0, 0, TO_ROOM);
    } else {
      result = number(1, 1000);
      sprintf(buf, "$n activates $p.  Result = %d.", result);
      sprintf(buf2, "You activate $p.  Result = %d.", result);
      act(buf, FALSE, ch, rng, 0, TO_CHAR);
      act(buf, FALSE, ch, rng, 0, TO_ROOM);
    }
    
    return TRUE;
  }
  return FALSE;
}


SPECIAL(junk_pile_fridge)
{
  struct room_data *room = (struct room_data *) me;
  
  if (!cmd && !IS_SET(room->dir_option[WEST]->exit_info, EX_CLOSED)) {
    send_to_room("The refridgerator door slams shut!\r\n", real_room(room->number));
    SET_BIT(room->dir_option[WEST]->exit_info, EX_CLOSED);
    SET_BIT(room->dir_option[WEST]->exit_info, EX_LOCKED);
    send_to_room("The refridgerator door slams shut!\r\n", room->dir_option[WEST]->to_room);
    SET_BIT(world[room->dir_option[WEST]->to_room].dir_option[EAST]->exit_info, EX_CLOSED);
    SET_BIT(world[room->dir_option[WEST]->to_room].dir_option[EAST]->exit_info, EX_LOCKED);
  } else if (CMD_IS("west") && !IS_SET(room->dir_option[WEST]->exit_info, EX_CLOSED)) {
    act("As you approach the roof, the refridgerator door slams shut, blocking your exit!",
        FALSE, ch, 0, 0, TO_CHAR);
    act("As $n tries to leave, the refridgerator door slams shut!", FALSE, ch, 0, 0, TO_ROOM);
    SET_BIT(room->dir_option[WEST]->exit_info, EX_CLOSED);
    SET_BIT(room->dir_option[WEST]->exit_info, EX_LOCKED);
    send_to_room("The refridgerator door slams shut!\r\n", room->dir_option[WEST]->to_room);
    SET_BIT(world[room->dir_option[WEST]->to_room].dir_option[EAST]->exit_info, EX_CLOSED);
    SET_BIT(world[room->dir_option[WEST]->to_room].dir_option[EAST]->exit_info, EX_LOCKED);
    return TRUE;
  }
  return FALSE;
}

SPECIAL(climb_up_junk_pile)
{
  if (CMD_IS("climb")) {
    any_one_arg(argument, arg);
    if (!(!str_cmp(arg, "pile") || !str_cmp(arg, "junk"))) {
      send_to_char("Climb what?\r\n", ch);
      return TRUE;
    }
    if (!success_test(GET_STR(ch), 4)) {
      send_to_char("You lose your grip and fall!\r\n", ch);
      act("$n loses $s grip and falls from the junk pile!", TRUE, ch, 0, 0, TO_ROOM);
      damage(ch, ch, 1, TYPE_FALL, TRUE);
      WAIT_STATE(ch, 2 RL_SEC);
      return TRUE;
    }
    send_to_char("You climb the junk pile easily.\r\n", ch);
    act("$n climbs up the junk pile.", TRUE, ch, 0, 0, TO_ROOM);
    char_from_room(ch);
    char_to_room(ch, real_room(12246));
    look_at_room(ch, 0);
    act("$n climbs up the junk pile.", TRUE, ch, 0, 0, TO_ROOM);
    return TRUE;
  }
  return FALSE;
}

SPECIAL(climb_down_junk_pile)
{
  if (CMD_IS("climb")) {
    any_one_arg(argument, arg);
    if (!(!str_cmp(arg, "pile") || !str_cmp(arg, "junk"))) {
      send_to_char("Climb what?\r\n", ch);
      return TRUE;
    }
    if (!success_test(GET_STR(ch), 4)) {
      send_to_char("You lose your grip and fall!\r\n", ch);
      act("$n loses $s grip and falls from the junk pile!", TRUE, ch, 0, 0, TO_ROOM);
      char_from_room(ch);
      char_to_room(ch, real_room(12278));
      look_at_room(ch, 0);
      act("$n falls from above, landing hard on the ground.", TRUE, ch, 0, 0, TO_ROOM);
      damage(ch, ch, 1, TYPE_FALL, TRUE);
      WAIT_STATE(ch, 2 RL_SEC);
      return TRUE;
    }
    send_to_char("You climb down the junk pile.\r\n", ch);
    act("$n climbs down the junk pile.", TRUE, ch, 0, 0, TO_ROOM);
    char_from_room(ch);
    char_to_room(ch, real_room(12278));
    look_at_room(ch, 0);
    act("$n climbs down the junk pile.", TRUE, ch, 0, 0, TO_ROOM);
    return TRUE;
  }
  return FALSE;
}

SPECIAL(roots_receptionist)
{
  struct char_data *recep = (struct char_data *) me;
  struct char_data *vict, *root = NULL;
  struct descriptor_data *d;
  struct obj_data *obj, *pager = NULL;
  int i;
  
  
  if (world[recep->in_room].number != ROOTS_RECEPTION)
    return FALSE;
  
  if (CMD_IS("up") && memory(recep, ch)) {
    forget(recep, ch);
    return FALSE;
  } else if (!isname("root", GET_KEYWORDS(ch)) && (CMD_IS("open") || CMD_IS("north"))) {
    do_say(recep, "Sorry, I can't let you do that.", 0, 0);
    return TRUE;
  }
  
  if (cmd || !AWAKE(ch))
    return 0;
  
  for (d = descriptor_list; d; d = d->next)
    if (d->character && !d->connected &&
        isname("root", GET_KEYWORDS(d->character)) &&
        !PLR_FLAGS(d->character).AreAnySet(PLR_EDITING, PLR_WRITING,
                                           PLR_MAILING, PLR_SWITCHED,
                                           PLR_PROJECT, PLR_MATRIX,
                                           PLR_SPELL_CREATE,
                                           PLR_CUSTOMIZE, ENDBIT)) {
          root = d->character;
          break;
        }
  
  if (root) {
    for (obj = root->carrying; obj; obj = obj->next_content)
      if (GET_OBJ_VNUM(obj) == ROOTS_PAGER) {
        pager = obj;
        break;
      }
    for (i = 0; i < (NUM_WEARS - 1) && !pager; i++)
      if (GET_EQ(root, i) && GET_OBJ_VNUM(GET_EQ(root, i)) == ROOTS_PAGER) {
        pager = GET_EQ(root, i);
        break;
      }
  }
  
  for (vict = world[recep->in_room].people; vict; vict = vict->next_in_room)
    if (!IS_NPC(vict) && !memory(recep, vict) && vict != root) {
      remember(recep, vict);
      if (!root || !CAN_SEE(vict, root)) {
        do_say(recep, "I'm sorry, Root isn't in at this time.", 0, 0);
        do_say(recep, "I can set up an appointment if you want.", 0, 0);
      } else {
        act("$n pushes a button on the intercom and speaks into it.",
            TRUE, recep, 0, 0, TO_ROOM);
        if (pager) {
          act("$p beeps in an annoying high-pitch.", FALSE,
              root, pager, 0, TO_CHAR);
          act("$n's $p beeps annoyingly.", TRUE, root, pager, 0, TO_ROOM);
        }
        sprintf(arg, "Sir, %s is here to see you.", GET_CHAR_NAME(vict));
        do_say(recep, "Root will be just a moment.  Please take a seat.", 0, 0);
      }
      return TRUE;
    }
  
  return FALSE;
}

SPECIAL(roots_office)
{
  struct char_data *recep;
  
  if (CMD_IS("tell")) {
    half_chop(argument, buf, buf2);
    
    if (IS_NPC(ch) || !isname("root", GET_KEYWORDS(ch)) ||
        !isname("michele", buf) || !strstr(buf2, "admit "))
      return FALSE;
    
    for (recep = world[real_room(ROOTS_RECEPTION)].people; recep;
         recep = recep->next_in_room)
      if (IS_NPC(recep) && isname("michele", GET_KEYWORDS(recep)))
        break;
    
    if (!recep)
      return FALSE;
    
    char *name, *ptr = (strstr(buf2, "admit ") + 6);
    name = new char[20];
    any_one_arg(ptr, name);
    
    
    /*    if (!(vict = get_char_room(name, recep->in_room)) || IS_NPC(vict))
     perform_tell(recep, ch, "There is no one waiting by that name.");
     else {
     act("$n opens the door, leads $N through, and closes it behind $M.",
     TRUE, recep, 0, vict, TO_NOTVICT);
     act("You lead $N into Root's office.", FALSE, recep, 0, vict, TO_CHAR);
     act("$n opens the door, leads you through, and closes it behind you.",
     FALSE, recep, 0, vict, TO_VICT);
     char_from_room(vict);
     char_to_room(vict, ch->in_room);
     look_at_room(vict, 0);
     act("$n is shown into the office.", TRUE, vict, 0, 0, TO_ROOM);
     }
     */
    delete [] name;
    return TRUE;
  }
  return FALSE;
}


extern void end_quest(struct char_data *ch);

SPECIAL(orkish_truckdriver)
{
  struct char_data *driver = (struct char_data *) me;
  if (FIGHTING(driver)) {
    if (quest_table[GET_QUEST(FIGHTING(driver))].vnum == 5000) {
      send_to_char("The driver has been alerted! The run is a failure!\r\n", FIGHTING(driver));
      if (world[driver->in_room].dir_option[WEST]) {
        delete world[driver->in_room].dir_option[WEST];
        world[driver->in_room].dir_option[WEST] = NULL;
        for (struct char_data *temp = world[real_room(5062)].people; temp; temp = temp->next_in_room) {
          send_to_char("You jump off the truck as it takes off!\r\n", temp);
          char_from_room(temp);
          char_to_room(temp, driver->in_room);
        }
      }
      end_quest(FIGHTING(driver));
    }
  }
  if (world[driver->in_room].number == 8198 && (time_info.hours < 2 || time_info.hours > 3)) {
    act("$n says goodbye to the girl at the stand and hops into his truck. It's engine rumbles into life and it drives off into the distance.", FALSE, driver, 0, 0, TO_ROOM);
    if (world[driver->in_room].dir_option[WEST]) {
      delete world[driver->in_room].dir_option[WEST];
      world[driver->in_room].dir_option[WEST] = NULL;
      for (struct char_data *temp = world[real_room(5062)].people; temp; temp = temp->next_in_room) {
        send_to_char("You jump off the truck as it takes off!\r\n", temp);
        char_from_room(temp);
        char_to_room(temp, driver->in_room);
      }
    }
    char_from_room(driver);
    char_to_room(driver, real_room(5063));
  } else if (world[driver->in_room].number == 5063 && (time_info.hours == 2 || time_info.hours == 3)) {
    char_from_room(driver);
    char_to_room(driver, real_room(8198));
    if (!world[driver->in_room].dir_option[WEST]) {
      world[driver->in_room].dir_option[WEST] = new room_direction_data;
      memset((char *) world[driver->in_room].dir_option[WEST], 0,
             sizeof (struct room_direction_data));
      world[driver->in_room].dir_option[WEST]->to_room = real_room(5062);
    }
    act("A GMC 4201 pulls into the rest stop, the orkish truck driver getting out and going over the coffee stand.", FALSE, driver, 0, 0, TO_ROOM);
  }
  return FALSE;
}

SPECIAL(Janis_Amer_Girl)
{
  struct char_data *mob = (struct char_data *) me, *tch = world[mob->in_room].people;
  if (!AWAKE(mob))
    return FALSE;
  if (GET_SPARE1(mob) && !cmd) {
    switch (GET_SPARE1(mob)) {
      case 1:
        do_say(mob, "About fraggin' time you got here.", 0, 0);
        break;
      case 3:
        do_say(mob, "Shut the frag up, we'll geek him when we geek him, right now we're going to tell the newcomer what we already know.", 0, 0);
        break;
      case 5:
        act("$n walks forward from the table, coming closer to you.", FALSE, mob, 0, 0, TO_ROOM);
        do_say(mob, "It's taking place at the docks, take that uniform on the table and go collect, he said \"Blue-eyes\" sent him, make sure to remember that you may need it.", 0, 0);
        break;
      case 6:
        for (; tch; tch = tch->next_in_room)
          if (quest_table[GET_QUEST(tch)].vnum == 5001)
            break;
        if (!tch)
          GET_SPARE1(mob) = 0;
        else if (GET_RACE(tch) != RACE_HUMAN || GET_SEX(tch) != SEX_MALE)
          do_say(mob, "And for frags sake, try and get someone who looks something like this guy to make the collection.", 0, 0);
        else
          do_say(mob, "Make sure you don't do anything wierd, this guy won't hand it over if you're acting suspicious.", 0, 0);
        break;
      case 8:
        act("$n walks back towards the table and rests on it casually, \"Yeah, Geek the little fraggin' slitch, it'll be the last time he ever tries to frag us over.\"", FALSE, mob, 0, 0, TO_ROOM);
        break;
      case 10:
        do_say(mob, "Newcomer, your job, ^WLight^n the fragger up.", 0, 0);
        break;
    }
    GET_SPARE1(mob)++;
  } else if (!cmd)
    for (; tch; tch = tch->next_in_room)
      if (quest_table[GET_QUEST(tch)].vnum == 5001) {
        GET_SPARE1(mob) = 1;
        break;
      }
  if (CMD_IS("west")) {
    for (; tch; tch = tch->next_in_room)
      if (IS_NPC(tch) && GET_MOB_VNUM(tch) == 5030)
        break;
    if (GET_SPARE1(mob) < 11)
      do_say(mob, "Where the frag do you think you're going? Don't think J won't fraggin' hear about you walking out on us.", 0, 0);
    else if (tch)
      do_say(mob, "Hey fragger, don't you try and fraggin' leave without lighting this slitch up, J will fraggin' hear about this.",  0, 0);
    else
      act("$n claps with glee, \"Hardcore chum, J will hear all about this, she'll fraggin' love it.\"", FALSE, mob, 0, 0, TO_ROOM);
  }
  return FALSE;
}

SPECIAL(Janis_Amer_Jerry)
{
  struct char_data *mob = (struct char_data *) me;
  if (!AWAKE(mob) || cmd)
    return FALSE;
  if (GET_SPARE1(mob)) {
    switch (GET_SPARE1(mob)) {
      case 2:
        do_say(mob, "Sent word to J over an hour ago, how long we have to keep this chump alive?", 0, 0);
        break;
      case 4:
        do_say(mob, "Listen up, I don't want to have to repeat myself, you don't want to end up like this guy do you.", 0, 0);
        act("$n reaches back and slams his fist into the prisoner's face.", FALSE, mob, 0, 0, TO_ROOM);
        break;
      case 7:
        do_say(mob, "Can I fraggin' do him now?", 0, 0);
        break;
      case 9:
        act("$n pours gasoline from the jerry can over captive who starts screaming, he then turns to you and tosses you a lighter, grinning all the while.", FALSE, mob, 0, 0, TO_ROOM);
        break;
    }
    GET_SPARE1(mob)++;
  } else
    for (struct char_data *tch = world[mob->in_room].people; tch; tch = tch->next_in_room)
      if (quest_table[GET_QUEST(tch)].vnum == 5001) {
        act("The pair turn towards you as you enter.", FALSE, mob, 0, 0, TO_ROOM);
        GET_SPARE1(mob) = 1;
        break;
      }
  return FALSE;
}

SPECIAL(Janis_Amer_Door)
{
  struct char_data *mob = (struct char_data *) me;
  if (!AWAKE(mob))
    return FALSE;
  if (CMD_IS("west") && !IS_SET(EXIT(mob, EAST)->exit_info, EX_CLOSED)) {
    do_say(mob, "See you around, omae.", 0, 0);
    do_gen_door(mob, "door", 0, SCMD_CLOSE);
  } else if ((CMD_IS("east") || CMD_IS("open")) && quest_table[GET_QUEST(ch)].vnum != 5001) {
    do_say(mob, "And just who do you think you are, punk?", 0, 0);
    return TRUE;
  } else if (!cmd && IS_SET(EXIT(mob, EAST)->exit_info, EX_CLOSED)) {
    for (struct char_data *tch = world[mob->in_room].people; tch; tch = tch->next_in_room)
      if (quest_table[GET_QUEST(tch)].vnum == 5001) {
        do_say(mob, "You must be the chum that J sent, the guy's in here.", 0, 0);
        do_gen_door(mob, "door", 0, SCMD_OPEN);
        break;
      }
  }
  return FALSE;
}

SPECIAL(Janis_Meet)
{
  struct char_data *mob = (struct char_data *) me;
  if (!AWAKE(mob))
    return FALSE;
  if ((CMD_IS("say") || CMD_IS("'")) && !IS_ASTRAL(ch) && *argument) {
    skip_spaces(&argument);
    if (!str_cmp(argument, "Blue-eyes sent me")) {
      if (GET_RACE(ch) != RACE_HUMAN || GET_SEX(ch) != SEX_MALE || !(GET_EQ(ch, WEAR_BODY) && GET_OBJ_VNUM(GET_EQ(ch, WEAR_BODY)) == 5032))  {
        do_say(mob, "Who the frag are you!? Oh wait, I fraggin' get it! This is a bust!", 0, 0);
        act("$n turns and starts running towards the road, quickly vanishing into the crowd.", FALSE, mob, 0, 0, TO_ROOM);
      } else {
        do_say(mob, "Ah, so you're the one they sent, here's the parcel. I've already collected payment.", 0, 0);
        struct obj_data *parcel = read_object(5033, VIRTUAL);
        obj_to_char(parcel, ch);
        act("$n hands $N the parcel, then turns and vanishes into the crowd of dockworkers.", FALSE, mob, 0, ch, TO_ROOM);
      }
      extract_char(mob);
      return TRUE;
    }
  }
  return FALSE;
}

SPECIAL(Janis_Captive)
{
  struct char_data *mob = (struct char_data *) me;
  if (CMD_IS("light") || CMD_IS("burn")) {
    act("As $N brings the lighter close to $n the fumes from the petrol catch alight, quickly spreading around $n's body.", FALSE, mob, 0, ch, TO_ROOM);
    act("The girl at the back of the warehouse begins to giggle with glee as the captive's screams are quickly stopped as he succumbs to the flames.", FALSE, mob, 0, 0, TO_ROOM);
    check_quest_kill(ch, mob);
    obj_to_room(read_object(5034, VIRTUAL), mob->in_room);
    extract_char(mob);
    return TRUE;
  }
  return FALSE;
}